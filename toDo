1. Pamietac ze BUFFER_LENGHT jest napisany dla tego sprzetu i jest z gory wiadome ile CPU jest
    dlatego trzeba byloby to zmienic ale to w wolnej chwili
2. Ogolnie jest problem bo przeciez warunki dwoch threadow sie zagniezdzaja, bo w momencie przeciez jak readIdx jest rowny writeIdx to
    rowniez producer produkuje za duzo.
3. JEszcze zapomnialem, ze przeciez reader wypisuje 7 miejsc a nie jedno dlatego sprawdzanie indeksu na pewno jest bledne



Aktualne toDO
1. Zmodyfikowac problam aby minimalizowac liczbe wystapien i ogolnie ilosc zmiennych globalnych.
2. Usunac printf z innych reader oraz analyzer bo przeciez moga wplywac na dzialanie programu.

                    // printf("%s %lld %lld %lld %lld %lld %lld %lld %lld %lld %lld\n", 
                    //             kS[writeIdx].cpuNum,
                    //             kS[writeIdx].user,   kS[writeIdx].nice, kS[writeIdx].system,  kS[writeIdx].idle, 
                    //             kS[writeIdx].iowait, kS[writeIdx].irq,  kS[writeIdx].softirq, kS[writeIdx].steal,
                    //             kS[writeIdx].guest,  kS[writeIdx].guest_nice);


Pomysl na loggera:

Kazdy watek bedzie mial dostepna tablice char[] ktora bedzie globalna. JEsli odczyta dane to wchodzi w sem_wait(). Watek powinien
wtedy odczytac wszystkie tablice z kazdego watku. Inne powinny byc NULL czy puste. I zapisac do pliku

project(TietoevryProject)  #the same name as root project

# main code
add_executable(analyzerTest test1.c)
target_link_libraries(analyzerTest PRIVATE analyzer)

# enable testing functionality
enable_testing()

add_test(
  NAME analyzerTest
  COMMAND $<TARGET_FILE:analyzerTest>
  )